#!/bin/bash
#SBATCH --job-name=ttc_training
#SBATCH --output=logs/slurm_%j.out
#SBATCH --error=logs/slurm_%j.err
#SBATCH -A berzelius-2025-72         # Specify your Berzelius project account here
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --gres=gpu:a100:1            # Request 1 A100 GPU. (Update manually if using >1 GPU.)
#SBATCH --mem=128G                 # Adjust memory to match the default for a 1-GPU job
#SBATCH --time=0:10:00
#SBATCH --partition=gpu            # Ensure this is the correct Berzelius GPU partition
#SBATCH -D /proj/berzelius-2025-72/users/x_bjabj   # Set working directory (optional)
#SBATCH -C thin                    # Request a thin node (use "-C fat" if extra memory is needed)
#SBATCH --mail-type=FAIL           # Optional: get notified on failure
#SBATCH --mail-user bhbj@kth.se

# Print job information
echo "Job ID: $SLURM_JOB_ID"
echo "Node: $SLURMD_NODENAME"
echo "Start time: $(date)"
echo "Directory: $(pwd)"

# Create logs directory if it doesn't exist
mkdir -p logs

# Set up environment
module load buildenv-gcccuda/11.8.0-gcc11.3.0
module load Python/3.11.5-GCCcore-12.3.0

# Set up uv for dependency management
if [ ! -f "uv" ]; then
    echo "Downloading uv..."
    curl -LsSf https://astral.sh/uv/install.sh | sh
fi
export PATH="$HOME/.cargo/bin:$PATH"

# Print Python and CUDA information
echo "Python version:"
uv run python --version

echo "CUDA availability:"
uv run python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
uv run python -c "import torch; print(f'CUDA device count: {torch.cuda.device_count()}')"
uv run python -c "import torch; print(f'CUDA device name: {torch.cuda.get_device_name(0)}')"

# Test importing key libraries
echo "Testing imports..."
uv run python -c "
import torch
import transformers
import trl
import wandb
import hydra
import datasets
print('All imports successful!')
"

# Test torchrun
echo "Testing torchrun..."
uv run torchrun --nproc_per_node=1 -m torch.distributed.run --help

# Print end time
echo "End time: $(date)" 